package testauth

import (
	"crypto/x509"
	"encoding/pem"
	"fmt"
)

// client certificate for dave2@public.bdap.io.crt (testnet)
const dave2ClientPEMCert = (`
-----BEGIN CERTIFICATE-----
MIIBxDCCAXagAwIBAgIUO9dgPO6n1PFnvNhL+qcbfVKDTEswBQYDK2VwMFMxCzAJ
BgNVBAYTAlVTMSUwIwYDVQQKDBxEdWFsaXR5IEJsb2NrY2hhaW4gU29sdXRpb25z
MR0wGwYDVQQDDBRkYXZlM0BwdWJsaWMuYmRhcC5pbzAeFw0yMDA4MTgyMjUxMTRa
Fw0yMTA4MTgyMjUxMTRaMFMxCzAJBgNVBAYTAlVTMSUwIwYDVQQKDBxEdWFsaXR5
IEJsb2NrY2hhaW4gU29sdXRpb25zMR0wGwYDVQQDDBRkYXZlMkBwdWJsaWMuYmRh
cC5pbzAqMAUGAytlcAMhAPpNpSH/djBoiax5F9788CAZ51X+81z2Xd7cEIG2HsUt
o1wwWjAfBgNVHSMEGDAWgBQ/ySzT6XuGfd6GMv680yMskAOnkzAJBgNVHRMEAjAA
MAsGA1UdDwQEAwIE8DAfBgNVHREEGDAWghRkYXZlNEBwdWJsaWMuYmRhcC5pbzAF
BgMrZXADQQCBPl1YbNUcYSZWXbso9qVW/DMAPJwGbDos/5AXl+zOB7Gek4ylADql
O2KV/Hy3UKvRBTsDf4AcYlk/jC4ZIiMM
-----END CERTIFICATE-----`)

// CA certificate for dave3@public.bdap.io.crt (testnet)
const dave3CAPEMCert = (`
-----BEGIN CERTIFICATE-----
MIIBvTCCAW+gAwIBAgIGAXQDvkf8MAUGAytlcDBTMQswCQYDVQQGEwJVUzElMCMG
A1UECgwcRHVhbGl0eSBCbG9ja2NoYWluIFNvbHV0aW9uczEdMBsGA1UEAwwUZGF2
ZTNAcHVibGljLmJkYXAuaW8wHhcNMjAwODE4MjI0MzU2WhcNMzAwODE5MjI0MzU2
WjBTMQswCQYDVQQGEwJVUzElMCMGA1UECgwcRHVhbGl0eSBCbG9ja2NoYWluIFNv
bHV0aW9uczEdMBsGA1UEAwwUZGF2ZTNAcHVibGljLmJkYXAuaW8wKjAFBgMrZXAD
IQA2K6/JIdfUasALknLb8/XvNyJ+wPb1Cewq/8ewx5mNNqNjMGEwDwYDVR0TAQH/
BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFD/JLNPpe4Z93oYy/rzT
IyyQA6eTMB8GA1UdIwQYMBaAFD/JLNPpe4Z93oYy/rzTIyyQA6eTMAUGAytlcANB
AEZlTIRhgIIFzyje84gTuROONp5VWbdOMJFurJuupC5O/sjRQOsjHp+XY68SEeGB
N4ADDJdeGZO3JZdQdWfj2Q0=
-----END CERTIFICATE-----`)

// TestCerts used to test Ed25519 certificates generated by dynamicd
func TestCerts() bool {
	block, _ := pem.Decode([]byte(dave2ClientPEMCert))
	clientCert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		fmt.Println("client cert Error", err)
		return false
	}
	fmt.Println("Client Certificate ExtKeyUsage", clientCert.ExtKeyUsage)
	fmt.Println("Client Certificate PublicKey", clientCert.PublicKey)
	fmt.Println("Client Certificate Subject", clientCert.Subject)
	fmt.Println("Client Certificate Issuer", clientCert.Issuer)
	fmt.Println("Client Certificate PublicKeyAlgorithm", clientCert.PublicKeyAlgorithm)
	fmt.Println("Client Certificate SerialNumber", clientCert.SerialNumber)
	fmt.Println("Client Certificate KeyUsage", clientCert.KeyUsage)
	block, _ = pem.Decode([]byte(dave3CAPEMCert))
	caCert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		fmt.Println("CA cert Error", err)
		return false
	}
	fmt.Println("CA Certificate ExtKeyUsage", caCert.ExtKeyUsage)
	fmt.Println("CA Certificate PublicKey", caCert.PublicKey)
	fmt.Println("CA Certificate Subject", caCert.Subject)
	fmt.Println("CA Certificate Issuer", caCert.Issuer)
	fmt.Println("CA Certificate PublicKeyAlgorithm", caCert.PublicKeyAlgorithm)
	fmt.Println("CA Certificate SerialNumber", caCert.SerialNumber)
	fmt.Println("CA Certificate KeyUsage", caCert.KeyUsage)
	return true
}
